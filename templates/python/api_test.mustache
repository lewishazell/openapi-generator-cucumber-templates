# coding: utf-8

{{>partial_header}}

import enum
import uuid
import pytest
import {{packageName}}
from typing import TypeVar, List
from pytest_bdd import scenarios, given, when, then, parsers

from {{apiPackage}}.{{classFilename}} import {{classname}}

T = TypeVar('T')

scenarios("{{#lambda.pascalcase}}{{classname}}{{/lambda.pascalcase}}.feature")

@pytest.fixture
def {{#lambda.snakecase}}{{classname}}{{/lambda.snakecase}}_fixture():
    configuration = {{packageName}}.Configuration(host = "http://localhost:4010")
    api_client = {{packageName}}.ApiClient(configuration)

    return {
        "api": {{classname}}(api_client),
        "request": None,
        "response": None
    } 

@given(parsers.parse('there is a "{operationId}" request'))
@given(parsers.parse('there is an "{operationId}" request'))
def given_there_is_a_request({{#lambda.snakecase}}{{classname}}{{/lambda.snakecase}}_fixture, operationId):
    {{#lambda.snakecase}}{{classname}}{{/lambda.snakecase}}_fixture["request"] = Request(operationId)

@given(parsers.parse('the request has a parameter "{parameter}" with a value of "{value}"'))
def given_the_request_has_a_parameter_with_a_value_of({{#lambda.snakecase}}{{classname}}{{/lambda.snakecase}}_fixture, parameter, value):
    request = {{#lambda.snakecase}}{{classname}}{{/lambda.snakecase}}_fixture["request"]

    {{#operations}}
    {{#operation}}
    if request.operationId == "{{#lambda.camelcase}}{{operationId}}{{/lambda.camelcase}}":
        {{#allParams}}
        if parameter == "{{#lambda.camelcase}}{{paramName}}{{/lambda.camelcase}}":
            request.parameters["{{paramName}}"] = convert_to({{{dataType}}}, value)
        {{/allParams}}
    {{/operation}}
    {{/operations}}

@given(parsers.parse('the request has a parameter "{parameter}" with a value of:'))
def given_the_request_has_a_parameter_with_a_value_of_docstring({{#lambda.snakecase}}{{classname}}{{/lambda.snakecase}}_fixture, parameter, docstring):
    request = {{#lambda.snakecase}}{{classname}}{{/lambda.snakecase}}_fixture["request"]

    {{#operations}}
    {{#operation}}
    if request.operationId == "{{#lambda.camelcase}}{{operationId}}{{/lambda.camelcase}}":
        {{#allParams}}
        {{#isModel}}
        if parameter == "{{#lambda.camelcase}}{{paramName}}{{/lambda.camelcase}}":
            request.parameters[parameter] = {{modelPackage}}.{{{dataType}}}.from_json(docstring)
        {{/isModel}}
        {{^isModel}}
        if parameter == "{{#lambda.camelcase}}{{paramName}}{{/lambda.camelcase}}":
            raise TypeError("Cannot deserialize a JSON string to {{{dataType}}}")
        {{/isModel}}
        {{/allParams}}
    {{/operation}}
    {{/operations}}

@given(parsers.parse('the request has a parameter "{parameter}" containing:'))
def given_the_request_has_a_parameter_containing({{#lambda.snakecase}}{{classname}}{{/lambda.snakecase}}_fixture, parameter, datatable):
    request = {{#lambda.snakecase}}{{classname}}{{/lambda.snakecase}}_fixture["request"]
    
    {{#operations}}
    {{#operation}}
    if request.operationId == "{{#lambda.camelcase}}{{operationId}}{{/lambda.camelcase}}":
        {{#allParams}}
        if parameter == "{{#lambda.camelcase}}{{paramName}}{{/lambda.camelcase}}":
            {{#isContainer}}
            collection = list[{{{baseType}}}]()
            for row in datatable:
                collection.append(convert_to({{{baseType}}}, row[0]))
            request.parameters["{{paramName}}"] = collection
            {{/isContainer}}
            {{^isContainer}}
            raise TypeError("Cannot read a DataTable into parameter {{#lambda.camelcase}}{{paramName}}{{/lambda.camelcase}} as it is not an array")
            {{/isContainer}}
        {{/allParams}}
    {{/operation}}
    {{/operations}}

@when('the request is sent')
def when_the_request_is_sent({{#lambda.snakecase}}{{classname}}{{/lambda.snakecase}}_fixture):
    api = {{#lambda.snakecase}}{{classname}}{{/lambda.snakecase}}_fixture["api"]
    request = {{#lambda.snakecase}}{{classname}}{{/lambda.snakecase}}_fixture["request"]
    
    {{#operations}}
    {{#operation}}
    if request.operationId == "{{#lambda.camelcase}}{{operationId}}{{/lambda.camelcase}}":
        {{#lambda.snakecase}}{{classname}}{{/lambda.snakecase}}_fixture["response"] = api.{{operationId}}_with_http_info({{#allParams}}request.parameters.get("{{#lambda.camelcase}}{{paramName}}{{/lambda.camelcase}}"){{^-last}}, {{/-last}}{{/allParams}})
    {{/operation}}
    {{/operations}}

@then(parsers.parse('the response status is {status_code:d}'))
def then_the_response_status_is({{#lambda.snakecase}}{{classname}}{{/lambda.snakecase}}_fixture, status_code):
    response = {{#lambda.snakecase}}{{classname}}{{/lambda.snakecase}}_fixture["response"]
    assert response.status_code == status_code

class Request:
    def __init__(self, operationId):
        self.operationId = operationId
        self.parameters = {}

def convert_to(to_type: type[T], value: str) -> any:
    if to_type == str:
        return value
    elif to_type == int:
        return int(value)
    elif to_type == float:
        return float(value)
    elif to_type == bool:
        return bool(value)
    elif to_type == uuid.UUID:
        return uuid.UUID(value)
    elif issubclass(to_type, enum.Enum):
        return to_type[value]

    raise TypeError(f"Cannot convert from str to {to_type.__name__}")
