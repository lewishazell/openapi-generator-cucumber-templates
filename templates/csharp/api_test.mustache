{{>partial_header}}
using System;
using System.IO;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Reflection;
using System.Threading.Tasks;
{{#useRestSharp}}
using RestSharp;
{{/useRestSharp}}
using Xunit;
using Xunit.Gherkin.Quick;
using Newtonsoft.Json;
using Newtonsoft.Json.Serialization;
using Newtonsoft.Json.Linq;

using {{packageName}}.Client;
using {{packageName}}.{{apiPackage}};
{{#hasImport}}
using {{packageName}}.{{modelPackage}};
{{/hasImport}}
using DataTable = Gherkin.Ast.DataTable;
using DocString = Gherkin.Ast.DocString;

namespace {{packageName}}.Test.Api
{
    /// <summary>
    ///  Class for testing {{classname}}
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech) using openapi-generator-cucumber-templates.
    /// Please ensure the below feature file is provided.
    /// </remarks>
    [FeatureFile("{{classname}}.feature")]
    public class {{classname}}Tests : Feature, IDisposable
    {
        {{^nonPublicApi}}
        private readonly {{classname}} instance;
        private Request request;
        private IApiResponse response;

        {{/nonPublicApi}}
        public {{classname}}Tests()
        {
            {{^nonPublicApi}}
            instance = new {{classname}}(new Configuration
            {
                BasePath = "http://localhost:4010"
            });
            {{/nonPublicApi}}
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        [Given(@"there is an? ""(.+)"" request")]
        [And(@"there is an? ""(.+)"" request")]
        public void Given_There_Is_A_Request(string operationId)
        {
            request = new Request(operationId);
        }

        [Given(@"the request has a parameter ""(.+)"" with a value of ""(.+)""")]
        [And(@"the request has a parameter ""(.+)"" with a value of ""(.+)""")]
        public void Given_The_Request_Has_A_Parameter_With_A_Value_Of(string parameter, string value)
        {
            {{#operations}}
            {{#operation}}
            if (request.OperationId == "{{#lambda.camelcase}}{{operationId}}{{/lambda.camelcase}}")
            {
                {{#allParams}}
                if (parameter == "{{paramName}}")
                {
                    request.Parameters.Set("{{paramName}}", Converter.ConvertTo<{{{dataType}}}>(value));
                }
                {{^-last}}

                {{/-last}}
                {{/allParams}}
            }
            {{^-last}}

            {{/-last}}
            {{/operation}}
            {{/operations}}
        }

        [Given(@"the request has a parameter ""(.+)"" with a value of:")]
        [And(@"the request has a parameter ""(.+)"" with a value of:")]
        public void Given_The_Request_Has_A_Parameter_With_A_Value_Of(string parameter, DocString docString)
        {
            if (docString.ContentType != "json")
            {
                throw new FormatException("DocString ContentType must be \"json\"");
            }

            {{#operations}}
            {{#operation}}
            if (request.OperationId == "{{#lambda.camelcase}}{{operationId}}{{/lambda.camelcase}}")
            {
                {{#allParams}}
                if (parameter == "{{paramName}}")
                {
                    request.Parameters.Set("{{paramName}}", JsonConvert.DeserializeObject<{{{dataType}}}>(docString.Content));
                }
                {{^-last}}

                {{/-last}}
                {{/allParams}}
            }
            {{^-last}}

            {{/-last}}
            {{/operation}}
            {{/operations}}
        }

        [Given(@"the request has a parameter ""(.+)"" containing:")]
        [And(@"the request has a parameter ""(.+)"" containing:")]
        public void Given_The_Request_Has_A_Parameter_Containing(string parameter, DataTable dataTable)
        {
            {{#operations}}
            {{#operation}}
            if (request.OperationId == "{{#lambda.camelcase}}{{operationId}}{{/lambda.camelcase}}")
            {
                {{#allParams}}
                if (parameter == "{{paramName}}")
                {
                    {{#isContainer}}
                    {{{dataType}}} collection = new();
                    foreach (var row in dataTable.Rows)
                    {
                        collection.Add(Converter.ConvertTo<{{{baseType}}}>(row.Cells.ElementAt(0).Value));
                    }

                    request.Parameters.Set("{{paramName}}", collection);
                    {{/isContainer}}
                    {{^isContainer}}
                    throw new InvalidOperationException("Cannot read a DataTable into parameter {{#lambda.camelcase}}{{paramName}}{{/lambda.camelcase}} as it is not an array");
                    {{/isContainer}}
                }
                {{^-last}}

                {{/-last}}
                {{/allParams}}
            }
            {{^-last}}

            {{/-last}}
            {{/operation}}
            {{/operations}}
        }

        [When("the request is sent")]
        [And("the request is sent")]
        public async Task When_The_Request_Is_Sent()
        {
            {{#operations}}
            {{#operation}}
            if (request.OperationId == "{{#lambda.camelcase}}{{operationId}}{{/lambda.camelcase}}")
            {
                response = await instance.{{operationId}}WithHttpInfoAsync({{#allParams}}request.Parameters.GetOrDefault<{{{dataType}}}>("{{paramName}}"){{^-last}}, {{/-last}}{{/allParams}});
            }
            {{^-last}}

            {{/-last}}
            {{/operation}}
            {{/operations}}
        }

        [Then("the response status is (.+)")]
        public void Then_The_Response_Status_Is(int statusCode)
        {
            Assert.Equal((HttpStatusCode)statusCode, response.StatusCode);
        }

        private class RequestParameters
        {
            private readonly Dictionary<string, object> values = new Dictionary<string, object>();

            public void Set<T>(string name, T value)
            {
                values[name] = value;
            }

            public T GetOrDefault<T>(string name)
            {
                return values.TryGetValue(name, out object value) ? (T)value : default;
            }
        }

        private class Request
        {
            public string OperationId { get; }
            public RequestParameters Parameters { get; } = new RequestParameters();
            
            public Request(string operationId)
            {
                OperationId = operationId;
            }
        }

        private static class Converter
        {
            private static readonly List<Reader> s_readers = new List<Reader>()
            {
                new Reader(type => type == typeof(Guid), (_, value) => Guid.Parse(value)),
                new Reader(type => type == typeof(object), (_, value) => value),
                new Reader(type => type.IsEnum, (type, value) => Enum.Parse(type, value))
            };

            public static T ConvertTo<T>(string s)
            {
                Type type = Nullable.GetUnderlyingType(typeof(T));
                type ??= typeof(T);

                foreach (var reader in s_readers)
                {
                    if (reader.TryRead<T>(s, out T value))
                    {
                        return value;
                    }
                }

                return (T)Convert.ChangeType(s, type);
            }

            private class Reader
            {
                private Func<Type, bool> predicate;
                private Func<Type, string, object> reader;

                public Reader(Func<Type, bool> predicate, Func<Type, string, object> reader)
                {
                    this.predicate = predicate;
                    this.reader = reader;
                }

                public bool CanRead(Type type) => predicate(type);

                public object Read(Type type, string s) => reader(type, s);

                public bool TryRead<T>(string s, out T value)
                {
                    var type = typeof(T);

                    if (CanRead(type))
                    {
                        value = (T)Read(type, s);
                        return true;
                    }

                    value = default;
                    return false;
                }
            }
        }
    }
}
