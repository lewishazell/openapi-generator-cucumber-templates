{{>partial_header}}
using System;
using System.IO;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Reflection;
using System.Threading.Tasks;
{{#useRestSharp}}
using RestSharp;
{{/useRestSharp}}
using Xunit;
using Xunit.Gherkin.Quick;
using Newtonsoft.Json;
using Newtonsoft.Json.Serialization;
using Newtonsoft.Json.Linq;

using {{packageName}}.Client;
using {{packageName}}.{{apiPackage}};
{{#hasImport}}
using {{packageName}}.{{modelPackage}};
{{/hasImport}}
using DataTable = Gherkin.Ast.DataTable;

namespace {{packageName}}.Test.Api
{
    /// <summary>
    ///  Class for testing {{classname}}
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech) using openapi-generator-cucumber-templates.
    /// Please ensure the below feature file is provided.
    /// </remarks>
    [FeatureFile("{{classname}}.feature")]
    public class {{classname}}Tests : Feature, IDisposable
    {
        {{^nonPublicApi}}
        private readonly {{classname}} instance;
        private IRequest request;

        {{/nonPublicApi}}
        public {{classname}}Tests()
        {
            {{^nonPublicApi}}
            instance = new {{classname}}(new Configuration
            {
                BasePath = "http://localhost:4010"
            });
            {{/nonPublicApi}}
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        [Given(@"there is an? ""(.+)"" request")]
        [And(@"there is an? ""(.+)"" request")]
        public void Given_There_Is_A_Request(string operationId)
        {
            {{#operations}}
            {{#operation}}
            if (operationId == "{{operationId}}")
            {
                request = new {{operationId}}Request(instance);
            }
            
            {{/operation}}
            {{/operations}}
        }

        [Given(@"the request has a parameter ""(.+)"" with a value of ""(.+)""")]
        [And(@"the request has a parameter ""(.+)"" with a value of ""(.+)""")]
        public void Given_Request_Has_Parameter_With_Value(string parameter, string value)
        {
            {{#operations}}
            {{#operation}}
            if (request is {{operationId}}Request {{#lambda.camelcase}}{{operationId}}{{/lambda.camelcase}}Request)
            {
                {{#allParams}}
                if (parameter == "{{paramName}}")
                {
                    {{#lambda.camelcase}}{{operationId}}{{/lambda.camelcase}}Request.{{paramName}}Parameter = Converter.ConvertTo<{{{dataType}}}>(value);
                }

                {{/allParams}}
            }
            
            {{/operation}}
            {{/operations}}
        }

        [Given(@"the request has a parameter ""(.+)"" containing:")]
        [And(@"the request has a parameter ""(.+)"" containing:")]
        public void Given_Request_Has_Parameter_With_Values(string parameter, DataTable dataTable)
        {
            {{#operations}}
            {{#operation}}
            if (request is {{operationId}}Request {{#lambda.camelcase}}{{operationId}}{{/lambda.camelcase}}Request)
            {
                {{#allParams}}
                if (parameter == "{{paramName}}")
                {
                    {{#lambda.camelcase}}{{operationId}}{{/lambda.camelcase}}Request.{{paramName}}Parameter = Converter.ConvertTo<{{{dataType}}}>(dataTable);
                }

                {{/allParams}}
            }
            
            {{/operation}}
            {{/operations}}
        }

        [When("the request is sent")]
        [And("the request is sent")]
        public async Task When_The_Request_Is_Sent()
        {
            await request.SendAsync();
        }

        [Then("the response status is (.+)")]
        public void The_Response_Status_Is(int statusCode)
        {
            Assert.Equal((HttpStatusCode)statusCode, request.Response.StatusCode);
        }

        private static class Converter
        {
            private static readonly List<Reader> s_readers = new List<Reader>()
            {
                new Reader(type => type == typeof(Guid), (_, value) => Guid.Parse(value)),
                new Reader(type => type == typeof(object), (_, value) => value),
                new Reader(type => type.IsEnum, (type, value) => Enum.Parse(type, value))
            };

            public static T ConvertTo<T>(string s)
            {
                Type type = Nullable.GetUnderlyingType(typeof(T));
                type ??= typeof(T);

                foreach (var reader in s_readers)
                {
                    if (reader.TryRead<T>(s, out T value))
                    {
                        return value;
                    }
                }

                return (T)Convert.ChangeType(s, type);
            }

            public static T ConvertTo<T>(DataTable dataTable)
            {
                Type type = Nullable.GetUnderlyingType(typeof(T));
                type ??= typeof(T);
                T instance = Activator.CreateInstance<T>();

                IList list = instance as IList;
                if (list == null)
                {
                    throw new InvalidOperationException($"Attempted to read DataTable into an object of type {type.Name} which is not derived from IList");
                }

                Type elementType = type.GetGenericArguments()[0];
                Reader reader = s_readers.FirstOrDefault(r => r.CanRead(elementType));
                foreach (var row in dataTable.Rows)
                {
                    string value = row.Cells.ElementAt(0).Value;
                    
                    if (reader != null)
                    {
                        list.Add(reader.Read(elementType, value));
                    }
                    else
                    {
                        list.Add(Convert.ChangeType(value, elementType));
                    }
                }

                return instance;
            }

            private class Reader
            {
                private Func<Type, bool> predicate;
                private Func<Type, string, object> reader;

                public Reader(Func<Type, bool> predicate, Func<Type, string, object> reader)
                {
                    this.predicate = predicate;
                    this.reader = reader;
                }

                public bool CanRead(Type type) => predicate(type);

                public object Read(Type type, string s) => reader(type, s);

                public bool TryRead<T>(string s, out T value)
                {
                    var type = typeof(T);

                    if (CanRead(type))
                    {
                        value = (T)Read(type, s);
                        return true;
                    }

                    value = default;
                    return false;
                }
            }
        }

        private interface IRequest
        {
            IApiResponse Response { get; }

            public Task SendAsync();
        }

        {{#operations}}
        {{#operation}}
        private class {{operationId}}Request : IRequest
        {
            private readonly {{classname}} instance;

            {{#allParams}}
            public {{{dataType}}} {{paramName}}Parameter;
            {{/allParams}}

            public IApiResponse Response { get; private set; }

            public {{operationId}}Request({{classname}} instance)
            {
                this.instance = instance;
            }

            public async Task SendAsync()
            {
                Response = await instance.{{operationId}}WithHttpInfoAsync({{#allParams}}{{paramName}}Parameter{{^-last}}, {{/-last}}{{/allParams}});
            }
        }

        {{/operation}}
        {{/operations}}
    }
}
