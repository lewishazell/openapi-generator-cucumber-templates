/*
{{#appName}}
{{{.}}}
{{/appName}}

Testing {{classname}}Service

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package {{packageName}}

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
	"reflect"
	"strconv"
	"strings"
	"testing"

	"github.com/cucumber/godog"
  	"github.com/stretchr/testify/assert"
	{{goImportAlias}} "{{gitHost}}/{{gitUserId}}/{{gitRepoId}}{{#isGoSubmodule}}/{{packageName}}{{/isGoSubmodule}}"
)

type Request struct {
	OperationId string
	Parameters map[string]any
}

type {{classname}}Feature struct {
	APIClient *{{goImportAlias}}.APIClient
	Request *Request
	Response *http.Response
}

func (f *{{classname}}Feature) givenThereIsARequest(operationId string) error {
	f.Request = &Request {
		OperationId: operationId,
		Parameters:  make(map[string]any),
	}
	
	return nil
}

func (f *{{classname}}Feature) givenTheRequestHasAParameterWithAValueOf(param string, val string) error {
	{{#operations}}
	{{#operation}}
	if f.Request.OperationId == "{{#lambda.camelcase}}{{operationId}}{{/lambda.camelcase}}" {
		{{#allParams}}
		if param == "{{#lambda.camelcase}}{{paramName}}{{/lambda.camelcase}}" {
			conv, err := convertTo[{{#isModel}}{{goImportAlias}}.{{/isModel}}{{{dataType}}}](val)
			if err != nil {
				return err
			}

			f.Request.Parameters["{{paramName}}"] = conv
		}
		{{^-last}}

		{{/-last}}
		{{/allParams}}
	}
	{{^-last}}

	{{/-last}}
	{{/operation}}
	{{/operations}}
	
	return nil
}

func (f *{{classname}}Feature) givenTheRequestHasAParameterWithAValueOfDocString(param string, val *godog.DocString) error {
	if val.MediaType != "json" {
		return errors.New("DocString MediaType must be \"json\"")
	}
	
	{{#operations}}
	{{#operation}}
	if f.Request.OperationId == "{{#lambda.camelcase}}{{operationId}}{{/lambda.camelcase}}" {
		{{#allParams}}
		if param == "{{paramName}}" {
			var obj {{#isModel}}{{goImportAlias}}.{{/isModel}}{{{dataType}}}
			err := json.Unmarshal([]byte(val.Content), &obj)
			if err != nil {
				return err
			}

			f.Request.Parameters["{{paramName}}"] = obj
		}
		{{^-last}}

		{{/-last}}
		{{/allParams}}
	}
	{{^-last}}

	{{/-last}}
	{{/operation}}
	{{/operations}}

	return nil
}

func (f *{{classname}}Feature) givenTheRequestHasAParameterContaining(param string, table *godog.Table) error {
	{{#operations}}
	{{#operation}}
	if f.Request.OperationId == "{{#lambda.camelcase}}{{operationId}}{{/lambda.camelcase}}" {
		{{#allParams}}
		if param == "{{paramName}}" {
			{{#isContainer}}
			slice := []{{{baseType}}}{}
			for _, row := range table.Rows {
				val, err := convertTo[{{{baseType}}}](row.Cells[0].Value)
				if err != nil {
					return err
				}

				slice = append(slice, val)
			}

			f.Request.Parameters["{{paramName}}"] = slice
			{{/isContainer}}
			{{^isContainer}}
			return errors.New("Cannot read a DataTable into parameter {{#lambda.camelcase}}{{paramName}}{{/lambda.camelcase}} as it is not an array")
			{{/isContainer}}
		}
		{{^-last}}

		{{/-last}}
		{{/allParams}}
	}
	{{^-last}}

	{{/-last}}
	{{/operation}}
	{{/operations}}

	return nil
}

func (f *{{classname}}Feature) whenTheRequestIsSent() error {
	{{#operations}}
	{{#operation}}
	if f.Request.OperationId == "{{#lambda.camelcase}}{{operationId}}{{/lambda.camelcase}}" {
		{{#pathParams}}
		var {{paramName}}Param any
		{{#-last}}

		{{/-last}}
		{{/pathParams}}
		{{#pathParams}}
		if val, ok := f.Request.Parameters["{{paramName}}"]; ok {
			{{paramName}}Param = val
		} else {
			return errors.New("parameter \"{{paramName}}\" is required")
		}

		{{/pathParams}}
		request := f.APIClient.{{classname}}.{{operationId}}(context.Background(){{#pathParams}}, safeCast[{{#isModel}}{{goImportAlias}}.{{/isModel}}{{{dataType}}}]({{paramName}}Param){{/pathParams}})
		
		{{#allParams}}
		{{^isPathParam}}
		if val, ok := f.Request.Parameters["{{paramName}}"]; ok {
			request = request.{{#lambda.pascalcase}}{{paramName}}{{/lambda.pascalcase}}(safeCast[{{#isModel}}{{goImportAlias}}.{{/isModel}}{{{dataType}}}](val))
		}

		{{/isPathParam}}
		{{/allParams}}
		{{#returnType}}_, {{/returnType}}response, err := request.Execute()
		if err != nil {
			return err
		}

		f.Response = response
	}
	{{^-last}}

	{{/-last}}
	{{/operation}}
	{{/operations}}

	return nil
}

func (f *{{classname}}Feature) thenTheResponseStatusIs(ctx context.Context, statusCode int) error {
	assert.Equal(godog.T(ctx), statusCode, f.Response.StatusCode, "expected status code to be %d but received %d", statusCode, f.Response.StatusCode)
	
	return nil
}

func convertTo[T any](val string) (T, error) {
	var zero T
	toType := reflect.TypeOf(zero)

	if toType == reflect.TypeOf("") {
		return any(val).(T), nil
	} else if toType == reflect.TypeOf(int32(0)) {
		i, err := strconv.ParseInt(val, 10, 32)
		return any(int32(i)).(T), err
	} else if toType == reflect.TypeOf(int64(0)) {
		i, err := strconv.ParseInt(val, 10, 64)
		return any(int64(i)).(T), err
	} else if toType == reflect.TypeOf(float32(0)) {
		f, err := strconv.ParseFloat(val, 32)
		return any(float32(f)).(T), err
	} else if toType == reflect.TypeOf(float64(0)) {
		f, err := strconv.ParseFloat(val, 64)
		return any(float64(f)).(T), err
	} else if toType == reflect.TypeOf(false) {
		b, err := strconv.ParseBool(val)
		return any(b).(T), err
	}

	return zero, fmt.Errorf("cannot convert from str to %s", toType.Name())
}

func safeCast[T any](value interface{}) T {
	var zero T
    
	if value == nil {
        return zero
    }

    if casted, ok := value.(T); ok {
        return casted
    }

    return zero
}

func Test{{#lambda.titlecase}}{{packageName}}{{/lambda.titlecase}}{{classname}}Service(t *testing.T) {
	suite := godog.TestSuite {
		ScenarioInitializer: Initialize{{#lambda.titlecase}}{{packageName}}{{/lambda.titlecase}}{{classname}}Scenario,
		Options: &godog.Options {
			Format: "pretty",
			Paths: []string{strings.ReplaceAll("{{classname}}.feature", "API.feature", "Api.feature")},
			TestingT: t,
		},
	}

	if suite.Run() != 0 {
		t.Fatal("feature test run failed")
	}
}

func Initialize{{#lambda.titlecase}}{{packageName}}{{/lambda.titlecase}}{{classname}}Scenario(ctx *godog.ScenarioContext) {
	configuration := {{goImportAlias}}.NewConfiguration()
	configuration.Scheme = "http"
	configuration.Host = "localhost:4010"
	feat := &{{classname}}Feature {
		APIClient: {{goImportAlias}}.NewAPIClient(configuration),
	}

	ctx.Given(`^there is an? "([^"]*)" request$`, feat.givenThereIsARequest)
	ctx.Given(`^the request has a parameter "([^"]*)" with a value of "([^"]*)"$`, feat.givenTheRequestHasAParameterWithAValueOf)
	ctx.Given(`^the request has a parameter "([^"]*)" with a value of:$`, feat.givenTheRequestHasAParameterWithAValueOfDocString)
	ctx.Given(`^the request has a parameter "([^"]*)" containing:$`, feat.givenTheRequestHasAParameterContaining)
	ctx.When(`^the request is sent$`, feat.whenTheRequestIsSent)
	ctx.Then(`^the response status is (\d+)$`, feat.thenTheResponseStatusIs)
}