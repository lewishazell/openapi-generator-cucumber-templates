#!/usr/bin/env bash
set -euo pipefail

TEST_DIR="src/{{packageName}}.Test"
DEFAULT_ENV_DIR="${TEST_DIR}/env/default"

mkdir -p "$DEFAULT_ENV_DIR"

cat > "${TEST_DIR}/StepImplementation.cs" <<'EOF'
{{>partial_header}}
using System;
using System.IO;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Reflection;
using System.Threading.Tasks;
{{#useRestSharp}}
using RestSharp;
{{/useRestSharp}}
using Gauge.CSharp.Lib;
using Gauge.CSharp.Lib.Attribute;
using Shouldly;
using Newtonsoft.Json;
using Newtonsoft.Json.Serialization;
using Newtonsoft.Json.Linq;

using {{packageName}}.Model;
using {{packageName}}.Client;
using {{packageName}}.{{apiPackage}};
{{#hasImport}}
using {{packageName}}.{{modelPackage}};
{{/hasImport}}

namespace {{packageName}}.Test
{
    /// <summary>
    ///  Class for testing {{packageName}}
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech) using openapi-generator-cucumber-templates.
    /// Please ensure the below feature file is provided.
    /// </remarks>
    public class StepImplementation
    {
        private Request request;
        private IApiResponse response;
        private Configuration configuration;

        public StepImplementation()
        {
            var defaultHost = "{{gaugeTargetHost}}";
            var targetHost = Environment.GetEnvironmentVariable("GAUGE_TARGET_HOST") ?? defaultHost;

            if (string.IsNullOrWhiteSpace(targetHost))
            {
                throw new InvalidOperationException("Missing required configuration: 'GAUGE_TARGET_HOST'. Please set the GAUGE_TARGET_HOST environment variable, or pass it at generation time with -p gaugeTargetHost=http://your-api");
            }

            configuration = new Configuration
            {
                BasePath = targetHost
            };
        }

        [Step("Create a <operationId> request for the <classname>")]
        public void CreateARequestForApi(string operationId, string classname)
        {
            request = new Request(classname, operationId);
        }

        [Step("Create an <operationId> request for the <classname>")]
        public void CreateAnRequestForApi(string operationId, string classname)
        {
            request = new Request(classname, operationId);
        }

        [Step("Give the <parameter> parameter a value of <value>")]
        public void GiveTheParameterAValueOf(string parameter, string value)
        {
            {{#apiInfo.apis}}
            if (request.Classname == "{{#lambda.pascalcase}}{{classname}}{{/lambda.pascalcase}}")
            {
                {{#operations}}
                {{#operation}}
                if (request.OperationId == "{{#lambda.camelcase}}{{operationId}}{{/lambda.camelcase}}")
                {
                    {{#allParams}}
                    if (parameter == "{{paramName}}")
                    {
                        request.Parameters.Set("{{paramName}}", Converter.ConvertTo<{{{dataType}}}>(value));
                        return;
                    }
                    {{^-last}}

                    {{/-last}}
                    {{/allParams}}
                }
                {{^-last}}

                {{/-last}}
                {{/operation}}
                {{/operations}}
            }

            {{/apiInfo.apis}}
            throw new InvalidOperationException($"{request.Classname}.{request.OperationId} does not have a parameter called {parameter}");
        }

        [Step("Give the <parameter> parameter a JSON value of <value>")]
        public void GiveTheParameterAJsonValueOf(string parameter, string value)
        {
            {{#apiInfo.apis}}
            if (request.Classname == "{{#lambda.pascalcase}}{{classname}}{{/lambda.pascalcase}}")
            {
                {{#operations}}
                {{#operation}}
                if (request.OperationId == "{{#lambda.camelcase}}{{operationId}}{{/lambda.camelcase}}")
                {
                    {{#allParams}}
                    if (parameter == "{{paramName}}")
                    {
                        request.Parameters.Set("{{paramName}}", JsonConvert.DeserializeObject<{{{dataType}}}>(value));
                        return;
                    }
                    {{^-last}}

                    {{/-last}}
                    {{/allParams}}
                }
                {{^-last}}

                {{/-last}}
                {{/operation}}
                {{/operations}}
            }

            {{/apiInfo.apis}}
            throw new InvalidOperationException($"{request.Classname}.{request.OperationId} does not have a parameter called {parameter}");
        }

        [Step("Give the <parameter> parameter the following values: <table>")]
        public void GiveTheParameterTheFollowingValues(string parameter, Table table)
        {
            {{#apiInfo.apis}}
            if (request.Classname == "{{#lambda.pascalcase}}{{classname}}{{/lambda.pascalcase}}")
            {
                {{#operations}}
                {{#operation}}
                if (request.OperationId == "{{#lambda.camelcase}}{{operationId}}{{/lambda.camelcase}}")
                {
                    {{#allParams}}
                    if (parameter == "{{paramName}}")
                    {
                        {{#isContainer}}
                        {{{dataType}}} collection = new();
                        foreach (var row in table.GetTableRows())
                        {
                            string value = row.GetCell("value");
                            collection.Add(Converter.ConvertTo<{{{baseType}}}>(value));
                        }

                        request.Parameters.Set("{{paramName}}", collection);
                        return;
                        {{/isContainer}}
                        {{^isContainer}}
                        throw new InvalidOperationException("Cannot read a DataTable into parameter {{#lambda.camelcase}}{{paramName}}{{/lambda.camelcase}} as it is not an array");
                        {{/isContainer}}
                    }
                    {{^-last}}

                    {{/-last}}
                    {{/allParams}}
                }
                {{^-last}}

                {{/-last}}
                {{/operation}}
                {{/operations}}
            }
            
            {{/apiInfo.apis}}
            throw new InvalidOperationException($"{request.Classname}.{request.OperationId} does not have a parameter called {parameter}");
        }

        [Step("Send the request")]
        public async Task SendTheRequest()
        {
            {{#apiInfo.apis}}
            if (request.Classname == "{{#lambda.pascalcase}}{{classname}}{{/lambda.pascalcase}}")
            {
                {{classname}} api = new {{classname}}(configuration);

                {{#operations}}
                {{#operation}}
                if (request.OperationId == "{{#lambda.camelcase}}{{operationId}}{{/lambda.camelcase}}")
                {
                    response = await api.{{operationId}}WithHttpInfoAsync({{#allParams}}request.Parameters.GetOrDefault<{{{dataType}}}>("{{paramName}}"){{^-last}}, {{/-last}}{{/allParams}});
                }
                {{^-last}}

                {{/-last}}
                {{/operation}}
                {{/operations}}
            }
            {{/apiInfo.apis}}
        }

        [Step("The response status should be <statusCode>")]
        public void ThenTheResponseStatusIs(int statusCode)
        {
            response.StatusCode.ShouldBe((HttpStatusCode)statusCode);
        }

        private class RequestParameters
        {
            private readonly Dictionary<string, object> values = new Dictionary<string, object>();

            public void Set<T>(string name, T value)
            {
                values[name] = value;
            }

            public T GetOrDefault<T>(string name)
            {
                return values.TryGetValue(name, out object value) ? (T)value : default;
            }
        }

        private class Request
        {
            public string Classname { get; }
            public string OperationId { get; }
            public RequestParameters Parameters { get; } = new RequestParameters();
            
            public Request(string classname, string operationId)
            {
                Classname = classname;
                OperationId = operationId;
            }
        }

        private static class Converter
        {
            private static readonly List<Reader> s_readers = new List<Reader>()
            {
                new Reader(type => type == typeof(Guid), (_, value) => Guid.Parse(value)),
                new Reader(type => type == typeof(object), (_, value) => value),
                new Reader(type => type.IsEnum, (type, value) => Enum.Parse(type, value))
            };

            public static T ConvertTo<T>(string s)
            {
                Type type = Nullable.GetUnderlyingType(typeof(T));
                type ??= typeof(T);

                foreach (var reader in s_readers)
                {
                    if (reader.TryRead<T>(s, out T value))
                    {
                        return value;
                    }
                }

                return (T)Convert.ChangeType(s, type);
            }

            private class Reader
            {
                private Func<Type, bool> predicate;
                private Func<Type, string, object> reader;

                public Reader(Func<Type, bool> predicate, Func<Type, string, object> reader)
                {
                    this.predicate = predicate;
                    this.reader = reader;
                }

                public bool CanRead(Type type) => predicate(type);

                public object Read(Type type, string s) => reader(type, s);

                public bool TryRead<T>(string s, out T value)
                {
                    var type = typeof(T);

                    if (CanRead(type))
                    {
                        value = (T)Read(type, s);
                        return true;
                    }

                    value = default;
                    return false;
                }
            }
        }
    }
}
EOF

cat > "${TEST_DIR}/manifest.json" <<'EOF'
{
  "Language": "dotnet",
  "Plugins": [
    "html-report"
  ]
}
EOF

cat > "${DEFAULT_ENV_DIR}/default.properties" <<'EOF'
# default.properties
# properties set here will be available to the test execution as environment variables

# sample_key = sample_value

# The path to the gauge reports directory. Should be either relative to the project directory or an absolute path
gauge_reports_dir = reports

# Set as false if gauge reports should not be overwritten on each execution. A new time-stamped directory will be created on each execution.
overwrite_reports = true

# Set to false to disable screenshots on failure in reports.
screenshot_on_failure = true

# The path to the gauge logs directory. Should be either relative to the project directory or an absolute path
logs_directory = logs

# Set to true to use multithreading for parallel execution
enable_multithreading = false

# The path the gauge specifications directory. Takes a comma separated list of specification files/directories.
gauge_specs_dir = specs

# The default delimiter used read csv files.
csv_delimiter = ,

# Allows steps to be written in multiline
allow_multiline_step = false

# The base URL your API client will use in tests.
# Can be overridden at runtime by setting the GAUGE_TARGET_HOST environment variable.
# For example:
#   export GAUGE_TARGET_HOST=http://localhost:4010
# This value is injected by OpenAPI Generator via -p gaugeTargetHost=...
GAUGE_TARGET_HOST = {{gaugeTargetHost}}
EOF

cat > "${DEFAULT_ENV_DIR}/dotnet.properties" <<'EOF'
# Holds the location of the created Gauge project
GAUGE_CSHARP_PROJECT_FILE = {{packageName}}.Test.csproj

# Default build configration
GAUGE_CSHARP_PROJECT_CONFIG=release

# sets the excluded dirs for gauge.
gauge_exclude_dirs = bin,obj

# Possible values for this property are 'suite', 'spec' or 'scenario’.
# 'scenario' clears the objects after the execution of each scenario, new objects are created for next execution.
gauge_clear_state_level = scenario
EOF